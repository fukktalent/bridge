/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Bridge, BridgeInterface } from "../../contracts/Bridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ERC20PresetMinterPauser",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "swapChainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "validator_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyRedeemed",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainFrom",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainTo",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "Redeemed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainFrom",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "chainTo",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "SwapInitialized",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "redeem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator_",
        type: "address",
      },
    ],
    name: "setValidator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint128",
        name: "amount",
        type: "uint128",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "validator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001700380380620017008339818101604052810190620000379190620002a7565b620000576200004b620000f160201b60201c565b620000f960201b60201c565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550826003819055508160048190555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000319565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001ef82620001c2565b9050919050565b60006200020382620001e2565b9050919050565b6200021581620001f6565b81146200022157600080fd5b50565b60008151905062000235816200020a565b92915050565b6000819050919050565b62000250816200023b565b81146200025c57600080fd5b50565b600081519050620002708162000245565b92915050565b6200028181620001e2565b81146200028d57600080fd5b50565b600081519050620002a18162000276565b92915050565b60008060008060808587031215620002c457620002c3620001bd565b5b6000620002d48782880162000224565b9450506020620002e7878288016200025f565b9350506040620002fa878288016200025f565b92505060606200030d8782880162000290565b91505092959194509250565b6113d780620003296000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100c6578063a7c589dd146100e4578063c0ebb58514610100578063f2fde38b1461011c5761007d565b80631327d3d8146100825780633a5381b51461009e578063715018a6146100bc575b600080fd5b61009c60048036038101906100979190610b50565b610138565b005b6100a66101f8565b6040516100b39190610b8c565b60405180910390f35b6100c4610222565b005b6100ce6102aa565b6040516100db9190610b8c565b60405180910390f35b6100fe60048036038101906100f99190610c25565b6102d3565b005b61011a60048036038101906101159190610ce7565b6103ac565b005b61013660048036038101906101319190610b50565b6105f7565b005b6101406106ee565b73ffffffffffffffffffffffffffffffffffffffff1661015e6102aa565b73ffffffffffffffffffffffffffffffffffffffff16146101b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ab90610dd1565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61022a6106ee565b73ffffffffffffffffffffffffffffffffffffffff166102486102aa565b73ffffffffffffffffffffffffffffffffffffffff161461029e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029590610dd1565b60405180910390fd5b6102a860006106f6565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033846040518363ffffffff1660e01b8152600401610330929190610e2c565b600060405180830381600087803b15801561034a57600080fd5b505af115801561035e573d6000803e3d6000fd5b505050507f8f967eabe9b3511f6a276fc06ee59a6c3bd2f56e398a61cabb5fd6c6753e36d03384600354600454868660405161039f96959493929190610e73565b60405180910390a1505050565b6000863360045460035489896040516020016103cd96959493929190610f73565b60405160208183030381529060405280519060200120905060006103f0826107ba565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610442868686856107ea909392919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff161461048f576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600115156002600083815260200190815260200160002060009054906101000a900460ff161515036104ed576040517f1b4e0c3c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016002600083815260200190815260200160002060006101000a81548160ff021916908315150217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933896040518363ffffffff1660e01b8152600401610576929190610e2c565b600060405180830381600087803b15801561059057600080fd5b505af11580156105a4573d6000803e3d6000fd5b505050507f25803e3d22df83fb456a253ce715ff1a759a75c3a0c6d92264b4f782d49680bd88336004546003548b8b6040516105e596959493929190610e73565b60405180910390a15050505050505050565b6105ff6106ee565b73ffffffffffffffffffffffffffffffffffffffff1661061d6102aa565b73ffffffffffffffffffffffffffffffffffffffff1614610673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066a90610dd1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d990611055565b60405180910390fd5b6106eb816106f6565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000816040516020016107cd91906110ed565b604051602081830303815290604052805190602001209050919050565b60008060006107fb87878787610815565b9150915061080881610921565b8192505050949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610850576000600391509150610918565b601b8560ff16141580156108685750601c8560ff1614155b1561087a576000600491509150610918565b60006001878787876040516000815260200160405260405161089f9493929190611131565b6020604051602081039080840390855afa1580156108c1573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361090f57600060019250925050610918565b80600092509250505b94509492505050565b6000600481111561093557610934611176565b5b81600481111561094857610947611176565b5b0315610aea576001600481111561096257610961611176565b5b81600481111561097557610974611176565b5b036109b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ac906111f1565b60405180910390fd5b600260048111156109c9576109c8611176565b5b8160048111156109dc576109db611176565b5b03610a1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a139061125d565b60405180910390fd5b60036004811115610a3057610a2f611176565b5b816004811115610a4357610a42611176565b5b03610a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7a906112ef565b60405180910390fd5b600480811115610a9657610a95611176565b5b816004811115610aa957610aa8611176565b5b03610ae9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae090611381565b60405180910390fd5b5b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b1d82610af2565b9050919050565b610b2d81610b12565b8114610b3857600080fd5b50565b600081359050610b4a81610b24565b92915050565b600060208284031215610b6657610b65610aed565b5b6000610b7484828501610b3b565b91505092915050565b610b8681610b12565b82525050565b6000602082019050610ba16000830184610b7d565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b610bcc81610ba7565b8114610bd757600080fd5b50565b600081359050610be981610bc3565b92915050565b6000819050919050565b610c0281610bef565b8114610c0d57600080fd5b50565b600081359050610c1f81610bf9565b92915050565b600080600060608486031215610c3e57610c3d610aed565b5b6000610c4c86828701610b3b565b9350506020610c5d86828701610bda565b9250506040610c6e86828701610c10565b9150509250925092565b600060ff82169050919050565b610c8e81610c78565b8114610c9957600080fd5b50565b600081359050610cab81610c85565b92915050565b6000819050919050565b610cc481610cb1565b8114610ccf57600080fd5b50565b600081359050610ce181610cbb565b92915050565b60008060008060008060c08789031215610d0457610d03610aed565b5b6000610d1289828a01610b3b565b9650506020610d2389828a01610bda565b9550506040610d3489828a01610c10565b9450506060610d4589828a01610c9c565b9350506080610d5689828a01610cd2565b92505060a0610d6789828a01610cd2565b9150509295509295509295565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610dbb602083610d74565b9150610dc682610d85565b602082019050919050565b60006020820190508181036000830152610dea81610dae565b9050919050565b6000819050919050565b6000610e16610e11610e0c84610ba7565b610df1565b610bef565b9050919050565b610e2681610dfb565b82525050565b6000604082019050610e416000830185610b7d565b610e4e6020830184610e1d565b9392505050565b610e5e81610bef565b82525050565b610e6d81610ba7565b82525050565b600060c082019050610e886000830189610b7d565b610e956020830188610b7d565b610ea26040830187610e55565b610eaf6060830186610e55565b610ebc6080830185610e64565b610ec960a0830184610e55565b979650505050505050565b60008160601b9050919050565b6000610eec82610ed4565b9050919050565b6000610efe82610ee1565b9050919050565b610f16610f1182610b12565b610ef3565b82525050565b6000819050919050565b610f37610f3282610bef565b610f1c565b82525050565b60008160801b9050919050565b6000610f5582610f3d565b9050919050565b610f6d610f6882610ba7565b610f4a565b82525050565b6000610f7f8289610f05565b601482019150610f8f8288610f05565b601482019150610f9f8287610f26565b602082019150610faf8286610f26565b602082019150610fbf8285610f5c565b601082019150610fcf8284610f26565b602082019150819050979650505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061103f602683610d74565b915061104a82610fe3565b604082019050919050565b6000602082019050818103600083015261106e81611032565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006110b6601c83611075565b91506110c182611080565b601c82019050919050565b6000819050919050565b6110e76110e282610cb1565b6110cc565b82525050565b60006110f8826110a9565b915061110482846110d6565b60208201915081905092915050565b61111c81610cb1565b82525050565b61112b81610c78565b82525050565b60006080820190506111466000830187611113565b6111536020830186611122565b6111606040830185611113565b61116d6060830184611113565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006111db601883610d74565b91506111e6826111a5565b602082019050919050565b6000602082019050818103600083015261120a816111ce565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611247601f83610d74565b915061125282611211565b602082019050919050565b600060208201905081810360008301526112768161123a565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006112d9602283610d74565b91506112e48261127d565b604082019050919050565b60006020820190508181036000830152611308816112cc565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061136b602283610d74565b91506113768261130f565b604082019050919050565b6000602082019050818103600083015261139a8161135e565b905091905056fea26469706673582212204b9dbd2df07087b4c7c797fbcbb10b66ee1c1bbf2dfbbb08e4d0753a30eddc4a64736f6c634300080d0033";

type BridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bridge__factory extends ContractFactory {
  constructor(...args: BridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    token: string,
    chainId: BigNumberish,
    swapChainId: BigNumberish,
    validator_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Bridge> {
    return super.deploy(
      token,
      chainId,
      swapChainId,
      validator_,
      overrides || {}
    ) as Promise<Bridge>;
  }
  override getDeployTransaction(
    token: string,
    chainId: BigNumberish,
    swapChainId: BigNumberish,
    validator_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      token,
      chainId,
      swapChainId,
      validator_,
      overrides || {}
    );
  }
  override attach(address: string): Bridge {
    return super.attach(address) as Bridge;
  }
  override connect(signer: Signer): Bridge__factory {
    return super.connect(signer) as Bridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeInterface {
    return new utils.Interface(_abi) as BridgeInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bridge {
    return new Contract(address, _abi, signerOrProvider) as Bridge;
  }
}
